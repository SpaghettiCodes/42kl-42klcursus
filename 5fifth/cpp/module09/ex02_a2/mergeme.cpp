# include <algorithm>
# include <vector>
# include <math.h>
# include <iostream>

// determine which index to jam in next
int	jacobsthal_num_gen()
{
	static int jn;
	static int n;

	if (n == 0)
		jn = 0;
	else if (n == 1)
		jn = 1;
	else
		jn = pow(2, n) - jn;
	++n;
	return jn;
}

int	binary_search(	std::vector<int> &in, 
						size_t group_size, 
						size_t which, 
						int start, 
						int stop
)
{
	int							last_elem_loc = group_size - 1;
	int							midpoint = ((stop - start) / 2) + start;

	std::vector<int>::iterator	tomatch_start = in.begin() + (which * group_size);
	std::vector<int>::iterator	tomatch_end = tomatch_start + last_elem_loc;

	std::vector<int>::iterator	mid_start = in.begin() + (midpoint * group_size);
	std::vector<int>::iterator	mid_end = mid_start + last_elem_loc;

	std::vector<int>::iterator	start_start = in.begin() + (start * group_size);
	std::vector<int>::iterator	start_end = start_start + last_elem_loc;

	// std::cout << "Comparing: " << *(tomatch_end) << " and " << *(mid_end) << std::endl;

	if (stop <= start)
		return ((*(tomatch_end) > *(start_end)) ? (start + 1) : start);

	if (*(tomatch_end) == *(mid_end))
		return midpoint + 1;

	if (*(tomatch_end) > *(mid_end))
		return binary_search(in, group_size, which, midpoint + 1, stop);

	return binary_search(in, group_size, which, start, midpoint - 1);
}

void	insert_element(	std::vector<int> &in,
						size_t group_size,
						size_t which
					)
{
	size_t	group_num = in.size() / group_size;
	size_t	last_elem_loc = group_size - 1;
	size_t	i;

	std::vector<int>::iterator	chunk_start = in.begin() + (which * group_size);
	std::vector<int>::iterator	last_elem = chunk_start + last_elem_loc;
	std::vector<int>::iterator	chunk_stop = last_elem + 1;
	std::vector<int>::iterator	neg_ones;

	// TODO: make this binary search
	i = binary_search(in, group_size, which, 0, which);
	if (i >= which)
		return;

	// place padding values
	neg_ones = in.insert(
		in.begin() + (i * group_size),
		group_size,
		-1
	);

	// for (auto start = in.begin(); start != in.end(); ++start)
	// 	std::cout << *(start) << " ";
	// std::cout << std::endl;

	// replace -1s with the real values
	chunk_start = in.begin() + ((which + 1) * group_size);
	chunk_stop =  chunk_start + last_elem_loc + 1;

	// for (auto start = in.begin(); start != in.end(); ++start)
	// 	std::cout << *(start) << " ";
	// std::cout << std::endl;

	std::swap_ranges(
		chunk_start,
		chunk_stop,
		neg_ones
	);

	// for (auto start = in.begin(); start != in.end(); ++start)
	// 	std::cout << *(start) << " ";
	// std::cout << std::endl;

	// remove -1s
	in.erase(
		chunk_start,
		chunk_stop
	);

	// for (auto start = in.begin(); start != in.end(); ++start)
	// 	std::cout << *(start) << " ";
	// std::cout << std::endl << std::endl;
}

int jacobsthal_num_gen(int n)
{
	return ((pow(2, n) - pow(-1, n)) / 3);
}

void	ford_johnson(std::vector<int> &in, size_t group_size, size_t prev_size)
{
	std::size_t	subgroup_size = group_size / 2;
	std::size_t	total_size = prev_size * subgroup_size;

	std::size_t	num_of_groups = (total_size / group_size);
	bool		is_odd = total_size % group_size;
	std::size_t	num_of_subgroups = num_of_groups * 2;
	std::size_t	last_elem_loc = (group_size / 2) - 1;

	std::vector<int>::iterator	last_var;

	std::size_t	first_elem;
	std::size_t	second_elem;

	std::size_t i = 0;

	// std::cout << "Group Size: " << group_size << " Subgroup Size: " << subgroup_size << std::endl;
	// std::cout << "Previous iteration had " << prev_size << " groups" << std::endl;
	// std::cout << "Working with " << total_size << " elements" << std::endl;
	// std::cout << "Number of groups formed: " << num_of_groups << std::endl << std::endl;

	if (!(num_of_groups))
		return;

	while (i < num_of_groups)
	{
		first_elem = i * group_size;
		second_elem = first_elem + (group_size / 2);

		if (in[first_elem + last_elem_loc] > in[second_elem + last_elem_loc])
		{
			std::swap_ranges(
				in.begin() + first_elem,
				in.begin() + second_elem,
				in.begin() + second_elem
			);
		}
		++i;
	}

	ford_johnson(in, group_size * 2, num_of_groups);

	// insert remaining characters
	int	j_num_idx = 2;
	int previous_jacobthal_number = jacobsthal_num_gen(2);
	int	current_jacobthal_number = jacobsthal_num_gen(2);
	int current_indx = current_jacobthal_number;

	// insert at the start of S the element that was pair with the first and smallest element of S
	// well i mean its already there so :P
	int sorted_vals = 2;

	// TODO: make this use jacobsthal_number
	while (sorted_vals < (num_of_groups * 2))
	{
		// for (auto start = in.begin(); start != in.end(); ++start)
		// 	std::cout << *(start) << " ";
		// std::cout << std::endl;

		insert_element(in, subgroup_size, sorted_vals);

		// for (auto start = in.begin(); start != in.end(); ++start)
		// 	std::cout << *(start) << " ";
		// std::cout << std::endl << "--------" << std::endl;

		sorted_vals += 2; // plus 2 cause we only need to sort all the 
	}

	// TODO: insert the odd one out
	if (is_odd)
	{
		// insert the odd one out
		insert_element(in, subgroup_size, prev_size - 1);
	}

	// std::cout << "--- End for group " << group_size << " ---" << std::endl << std::endl;
}

void test(std::vector<int> array)
{
	static int test_num;

	++test_num;
	std::cout << "---- Test " << test_num << " ----" << std::endl;

	ford_johnson(array, 2, array.size());

	for (auto start = array.begin(); start != array.end(); ++start)
		std::cout << *(start) << " ";
	std::cout << std::endl;

	bool	ok = true;
	for (auto start = array.begin(); start != (array.end() - 1) ; ++start)
	{
		if (*(start) > *(start + 1))
		{
			std::cerr << "KO" << std::endl;
			std::cerr << "AT: " << *(start) << " AND " << *(start + 1) << std::endl;
			ok = false;
		}
	}
	if (ok)
		std::cerr << "OK" << std::endl;
	std::cout << "---------------------------" << std::endl;
}

int main()
{
	// std::vector<int> stuff1 = {65,79,14,27,83,46,62,86,42,56,24,40,51,76,87,89,53,35,73,21,91,10,1,38,82,13,39,92,41,25,18,74,98,61,11,57,75,50,90,64,28,43,30,47,37,94,32,6,26,58,80,52,55,15,60,100,29,95,44,96,3,19,16,70,36,17,49,84,22,63,72,9,2,45,33,8,54,5,34,12,93,69,67,66,20,77,97,78,85,23,31,88,59,81,7,48,68,4,71,99};
	// std::vector<int> stuff2 = {88,8,16,79,51,93,74,43,68,69,4,53,45,60,98,13,77,75,76,18,34,66,59,39,67,37,26,35,25,12,63,97,20,65,50,21,33,61,40,31,32,55,11,95,6,83,81,48,1,17,28,80,96,87,23,30,72,90,91,57,71,89,58,99,3,47,41,49,7,29,54,38,94,22,78,42,52,44,15,85,10,19,56,73,92,86,24,46,62,14,9,5,70,64,27,100,84,2,82,36};
	// std::vector<int> stuff3 = {74,88,98,3,96,77,81,24,46,99,31,35,25,29,76,26,90,62,70,45,80,5,97,72,44,91,28,59,16,36,1,12,75,71,30,92,55,100,66,39,82,18,27,7,17,43,15,51,65,68,8,9,2,89,21,93,19,11,79,37,87,6,56,57,42,10,64,4,34,83,49,60,22,41,73,48,54,50,33,84,85,40,78,13,53,32,61,47,20,52,86,67,94,14,38,23,58,63,69,95};
	// std::vector<int> stuff4 = {8,4,1,6,2,5,3,7};
	// std::vector<int> stuff5 = {8,4,15,12,1,13,6,10,9,2,14,5,3,11,7};

	test({65,79,14,27,83,46,62,86,42,56,24,40,51,76,87,89,53,35,73,21,91,10,1,38,82,13,39,92,41,25,18,74,98,61,11,57,75,50,90,64,28,43,30,47,37,94,32,6,26,58,80,52,55,15,60,100,29,95,44,96,3,19,16,70,36,17,49,84,22,63,72,9,2,45,33,8,54,5,34,12,93,69,67,66,20,77,97,78,85,23,31,88,59,81,7,48,68,4,71,99});
	test({88,8,16,79,51,93,74,43,68,69,4,53,45,60,98,13,77,75,76,18,34,66,59,39,67,37,26,35,25,12,63,97,20,65,50,21,33,61,40,31,32,55,11,95,6,83,81,48,1,17,28,80,96,87,23,30,72,90,91,57,71,89,58,99,3,47,41,49,7,29,54,38,94,22,78,42,52,44,15,85,10,19,56,73,92,86,24,46,62,14,9,5,70,64,27,100,84,2,82,36});
	test({74,88,98,3,96,77,81,24,46,99,31,35,25,29,76,26,90,62,70,45,80,5,97,72,44,91,28,59,16,36,1,12,75,71,30,92,55,100,66,39,82,18,27,7,17,43,15,51,65,68,8,9,2,89,21,93,19,11,79,37,87,6,56,57,42,10,64,4,34,83,49,60,22,41,73,48,54,50,33,84,85,40,78,13,53,32,61,47,20,52,86,67,94,14,38,23,58,63,69,95});
	test({8,4,1,6,2,5,3,7});
	test({8,4,15,12,1,13,6,10,9,2,14,5,3,11,7});
	test({63,51,47,67,3,44,2,27,32,79,15,78,76,66,1,82,33,31,73,16,99,87,95,81,30,7,39,69,59,23,46,70,6,58,57,17,83,20,88,97,49,55,43,22,94,53,61,11,48,41,52,5,35,68,60,91,10,25,9,54,18,86,24,28,65,36,71,19,74,75,29,77,72,40,56,50,21,64,92,98,85,34,45,8,4,90,62,13,89,100,80,93,42,14,26,96,37,84,38,12});
	test({17,34,32,53,44,79,50,100,96,89,42,37,67,51,22,8,56,18,20,59,98,44,64,74,91,28,74,5,96,52,73,54,25,48,33,12,41,70,65,10,63,45,47,38,99,98,83,49,6,79,40,52,20,94,30,62,14,66,72,33,26,26,21,90,11,12,89,82,87,40,26,41,36,36,35,9,59,81,55,98,15,55,13,43,34,45,13,13,5,69,22,94,33,100,56,22,9,34,60,12,2,56,83,25,70,48,22,10,46,17,22,52,99,35,84,36,30,84,80,83,35,3,49,44,87,88,20,38,30,66,63,20,41,100,30,1,7,17,45,36,91,15,78,51,61,20,28,33,48,43,45,2,70,46,45,44,63,15,40,32,74,41,17,24,16,28,75,48,85,76,51,20,30,49,54,50,63,25,76,87,31,41,34,70,2,8,47,92,31,45,92,98,4,45,79,39,22,42,88,62,56,30,6,18,22,68,11,64,33,5,53,32,49});
	test({48,369,411,39,438,277,481,188,447,462,145,3,50,401,487,91,437,43,106,44,40,381,14,151,132,195,180,153,22,118,103,281,361,475,259,422,208,102,210,456,480,17,344,420,445,461,42,477,136,152,215,209,217,69,338,116,166,155,158,193,73,387,16,191,185,31,365,271,319,334,104,384,497,483,431,333,347,13,261,65,320,276,70,425,440,27,296,6,448,455,56,316,457,200,326,74,142,105,372,312,407,350,376,51,18,87,85,496,417,288,371,329,226,385,495,203,168,348,474,84,101,80,468,86,192,357,453,225,100,292,426,4,451,72,345,469,427,382,290,184,402,498,123,7,366,370,57,479,64,216,61,424,117,351,321,71,218,75,242,170,206,113,204,212,232,173,310,134,389,182,435,248,68,336,410,147,415,355,76,419,373,205,29,47,222,362,36,405,244,122,313,375,224,286,306,397,172,386,360,250,211,282,267,317,304,121,58,446,159,394,380,54,238,305,249,171,253,339,460,364,194,409,298,325,482,202,400,150,315,284,67,10,324,129,196,251,340,499,127,390,311,66,308,459,144,81,236,190,263,434,92,2,140,396,24,115,21,46,383,35,429,472,221,135,443,458,79,467,20,237,269,219,178,391,274,283,332,63,464,486,441,255,52,278,489,95,352,287,49,148,154,270,266,130,327,165,53,143,300,230,294,55,59,303,164,214,432,146,1,254,354,416,436,235,107,388,231,299,186,5,169,356,207,264,26,465,398,430,8,322,89,291,157,138,124,60,88,187,337,257,328,265,223,247,343,256,335,374,358,421,444,83,11,378,189,176,406,423,19,156,111,473,133,243,229,201,139,110,45,268,484,470,301,368,120,240,392,439,213,408,492,488,463,280,478,246,452,309,295,93,399,109,227,96,293,318,99,367,161,449,412,450,234,126,491,137,418,241,404,90,239,454,62,228,199,108,359,141,28,12,9,94,34,181,252,82,342,490,285,41,175,167,77,466,23,494,272,279,353,131,471,233,128,500,78,297,331,179,98,330,428,97,302,493,149,341,314,258,177,403,125,25,198,485,349,30,323,393,119,476,413,377,346,220,307,433,414,160,260,32,162,112,15,38,245,442,174,363,163,33,379,289,37,275,262,183,114,273,395,197});
	test({596,93,666,352,346,445,629,655,527,240,373,274,163,288,402,205,3,308,693,567,313,434,298,316,53,588,264,431,671,33,496,475,458,358,563,672,258,60,525,121,239,426,95,200,680,246,75,173,676,440,281,614,501,158,379,669,197,388,416,487,338,383,396,7,577,48,275,24,305,109,520,443,682,545,141,688,296,40,683,249,176,542,76,212,208,165,646,8,370,45,292,62,27,41,395,572,241,488,406,92,64,372,107,597,540,699,185,98,397,401,512,359,592,664,422,471,602,88,116,202,375,685,123,291,91,273,403,4,632,511,565,235,128,424,468,168,276,199,456,584,473,28,82,306,631,100,382,586,651,630,515,420,566,400,38,260,503,253,325,314,133,590,564,268,46,320,196,657,472,105,96,283,23,152,640,568,575,432,112,144,247,342,69,334,80,150,539,485,162,143,620,687,652,692,405,56,304,509,549,555,186,254,277,192,81,131,638,521,677,138,201,108,605,248,624,129,127,119,470,583,623,12,492,639,231,439,469,317,573,558,217,174,74,587,650,183,15,293,332,37,349,490,215,554,261,610,497,548,613,648,310,571,579,392,190,58,393,691,526,636,279,159,625,285,690,442,124,593,178,220,318,419,601,147,695,476,263,136,117,477,451,142,427,556,52,175,562,226,209,353,696,259,130,160,536,505,569,493,611,300,659,387,694,385,26,576,380,618,154,461,166,600,450,321,681,5,10,2,641,126,463,480,324,262,531,155,663,289,684,287,243,452,330,362,30,114,323,621,280,16,180,106,77,486,491,146,250,148,266,223,331,269,181,635,63,65,191,609,381,394,344,599,529,581,603,608,233,574,17,506,79,35,355,228,551,446,22,408,435,225,294,541,194,59,14,457,242,177,634,414,465,523,398,61,479,535,169,339,552,354,25,510,412,221,270,245,647,544,257,188,484,348,140,83,255,460,665,171,350,122,244,538,532,447,229,674,167,361,697,616,87,582,628,309,436,182,418,644,667,617,89,498,433,57,227,42,656,518,13,120,94,462,661,454,626,164,31,34,478,210,550,51,519,619,9,234,483,340,265,290,67,236,118,19,591,399,530,237,328,678,612,102,222,301,660,543,459,336,645,184,295,135,425,132,256,364,411,284,286,481,668,508,90,213,363,271,428,6,97,20,524,319,326,504,50,378,189,570,448,516,430,421,195,21,125,115,72,658,489,622,219,437,377,441,315,137,698,99,70,278,343,211,134,54,585,232,85,47,627,367,662,110,1,580,386,689,561,360,429,145,151,113,595,299,156,272,499,409,513,345,675,384,29,495,466,438,49,322,303,453,198,32,187,578,517,267,553,653,214,157,251,368,371,598,607,415,673,528,84,455,369,547,297,193,335,252,537,218,534,502,73,514,637,533,474,410,615,71,482,679,44,560,389,413,423,161,494,18,606,390,78,366,172,327,216,206,604,357,365,643,302,700,347,66,449,86,43,467,104,224,333,311,307,204,654,179,407,203,557,649,312,55,68,139,207,507,374,39,101,282,337,153,230,546,670,404,356,686,464,238,594,417,351,522,170,444,341,11,376,642,589,500,633,36,111,103,149,391,559,329});
	test({903,576,2,271,472,298,105,876,212,674,694,39,124,130,404,46,897,126,660,556,796,732,639,275,158,227,921,444,216,102,579,837,673,63,181,135,633,362,170,36,163,797,291,161,518,300,816,471,932,543,924,321,452,182,604,775,295,16,895,532,228,389,458,91,490,11,529,41,719,453,122,821,223,757,863,147,108,455,899,325,740,284,729,201,173,72,841,879,656,343,870,363,938,88,338,346,232,511,352,831,935,160,230,344,836,9,678,13,540,499,32,413,864,259,669,462,273,793,551,613,424,913,177,237,690,759,7,96,143,183,400,866,599,717,324,817,798,844,464,578,514,199,70,494,217,316,515,103,66,309,659,283,862,914,936,755,355,433,469,45,349,724,116,908,119,44,71,620,716,770,769,888,858,554,221,696,15,244,684,432,399,517,440,950,248,496,693,296,446,487,749,927,305,489,804,120,672,810,337,628,274,302,414,42,851,781,28,625,266,692,835,429,760,818,282,118,306,718,838,491,521,30,198,901,951,893,872,263,539,420,376,875,139,150,524,943,758,64,544,172,832,238,249,933,191,848,386,155,670,430,128,906,29,874,110,813,286,391,852,403,267,624,54,638,880,167,545,597,833,527,676,307,50,812,726,5,68,711,319,510,111,593,761,261,219,61,385,485,605,649,210,497,940,285,654,502,37,56,205,886,280,559,616,4,845,220,460,422,189,488,140,580,661,209,187,482,235,609,504,347,765,133,846,555,193,322,450,92,323,873,699,709,6,522,69,59,65,855,486,320,269,246,912,815,293,144,523,735,162,457,43,81,463,380,369,87,952,795,632,459,396,451,208,195,834,166,159,910,823,528,725,272,714,811,928,944,702,276,213,664,351,621,479,822,174,843,402,685,438,95,891,76,553,773,867,780,571,365,763,478,708,247,99,918,636,819,48,169,794,336,849,537,73,243,549,643,922,57,791,808,634,854,668,340,869,937,681,803,750,194,814,601,519,923,767,900,476,35,884,378,667,254,683,113,657,112,541,618,930,390,356,461,388,145,839,631,588,945,577,415,608,662,589,270,250,954,827,663,737,268,354,292,353,141,550,154,67,428,411,733,434,310,627,190,687,882,949,445,802,60,568,947,180,917,98,443,260,117,370,77,830,953,226,100,700,333,790,806,645,650,484,175,79,304,287,764,25,598,564,552,207,392,257,701,483,902,772,506,857,251,256,792,358,508,894,397,563,203,401,703,825,493,698,829,229,915,465,675,335,334,348,547,85,86,637,747,435,941,641,101,94,339,512,889,97,558,381,695,176,106,646,394,574,127,492,474,361,743,619,826,186,315,345,27,739,572,753,477,805,373,776,442,534,525,779,617,82,367,561,503,828,107,371,38,635,1,80,58,329,200,218,560,303,214,192,253,197,679,330,655,426,905,375,800,314,946,24,592,47,738,364,26,245,109,83,240,509,809,326,691,406,22,425,383,909,531,448,658,123,436,233,585,671,520,538,121,630,74,653,644,239,332,51,252,861,441,706,567,622,416,129,610,178,75,264,569,500,184,871,596,387,842,366,546,196,907,939,281,736,55,62,931,148,892,586,294,313,473,410,290,614,715,418,594,149,156,784,748,368,279,423,582,734,341,242,911,762,12,407,535,741,90,498,468,516,40,157,542,262,377,920,277,427,202,372,255,151,142,742,501,93,185,475,682,301,919,789,49,447,164,417,382,206,19,171,331,278,595,680,34,768,327,431,754,393,697,215,299,868,847,234,600,777,456,782,581,23,557,419,704,52,17,265,602,507,114,470,165,8,705,707,495,297,883,225,689,929,722,752,18,153,850,648,607,926,713,615,744,925,374,840,565,412,612,439,591,720,859,125,138,651,308,904,513,548,746,727,408,241,856,318,168,723,480,84,786,405,437,31,783,730,853,751,731,942,688,78,710,3,530,587,665,466,134,562,131,104,454,146,570,712,896,766,357,312,222,224,778,342,311,533,14,583,652,677,350,481,603,606,860,623,878,409,785,745,467,449,611,379,360,865,642,536,801,771,398,647,179,728,666,136,33,566,573,887,885,584,877,53,590,288,204,421,626,505,756,20,807,289,395,788,258,898,89,948,132,575,774,317,824,231,629,21,328,916,10,359,890,799,188,721,934,211,137,384,820,686,115,787,526,152,881,640,236});

	// for (int i = 2; i < 10; ++i)
	// {
	// 	std::cout << jacobsthal_num_gen(i) << " ";
	// }
	// std::cout << std::endl;
}