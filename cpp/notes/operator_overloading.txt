"ever want your + to function like -?"
"look no further"

Ad hoc polymorphism
	 polymorphic functions can be applied to arguments of different types

Operator Overloading
make operator works for user-defined classes

provide operators with a special meaning for a data type

Operator overloading is a compile-time polymorphism
	- idea of giving special meaning to an existing operator in C++ w/o changing its original meaning

User has to redefine the meaning of "+" operator such that it adds two class objects

			EXAMPLE

			class Complex {
			private:
				int real, imag;
			public:
				Complex(int r = 0, int i = 0) {real = r;   imag = i;}
				
				// This is automatically called when '+' is used with
				// between two Complex objects
				Complex operator + (Complex const &obj) {
					Complex res;
					res.real = real + obj.real;
					res.imag = imag + obj.imag;
					return res;
				}
				void print() { cout << real << " + i" << imag << '\n'; }
			};
			
			int main()
			{
				Complex c1(10, 5), c2(2, 4);
				Complex c3 = c1 + c2;
				c3.print();
			}


These Operator cant be overloaded 
{
	sizeof
	typeid
	Scope resolution (::)
	Class member access operators (.(dot), .* (pointer to member operator))
	Ternary or conditional (?:)
}

Operators that can be overloaded

		Binary Arithmetic     ->     +, -, *, /, %
		Unary Arithmetic     ->     +, -, ++, â€”
		Assignment     ->     =, +=,*=, /=,-=, %=
		Bit- wise      ->     & , | , << , >> , ~ , ^
		De-referencing     ->     (->)
		Dynamic memory allocation and De-allocation     ->     New, delete 
		Subscript     ->     [ ]
		Function call     ->     ()
		Logical      ->     &,  | |, !
		Relational     ->     >, < , = =, <=, >=

Important points about operator overloading 
1) For operator overloading to work, at least one of the operands must be a user-defined class object.
2) Assignment Operator: Compiler automatically creates a default assignment operator with every class. The default assignment operator does assign all members of the right side to the left side and works fine in most cases (this behaviour is the same as the copy constructor).
		Assignment Operator

3) Conversion Operator: We can also write conversion operators that can be used to convert one type to another type. 

				EXAMPLE

				#include <iostream>
				using namespace std;
				class Fraction
				{
				private:
					int num, den;
				public:
					Fraction(int n, int d) { num = n; den = d; }
				
					// Conversion operator: return float value of fraction
					operator float() const {
						return float(num) / float(den);
					}
				};
				
				int main() {
					Fraction f(2, 5);
					float val = f; // this will convert fraction to float
					cout << val << '\n';
					return 0;
				}

Overloading a default assignment operator and then making it private makes the user unable to use that assignment operator
