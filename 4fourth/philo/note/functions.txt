DATA RACES

- multiple task or threads access a shared resource without sufficient protection, leading to undefined or unpredictable behaviour
- 2 or more threads in a single process access the same memory location concurrently 
	- one of the accesses is for writting
	- threads are not using exclusive locks to control their accesses to that memory
- order of accessess is non-deterministic - computation may give different results from run to run depending on order

DEADLOCK

- two or more threads are blocked forever because they are waiting for each other

memset, printf, malloc, free, write,
usleep, gettimeofday, pthread_create,
pthread_detach, pthread_join, pthread_mutex_init,
pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock

MUTEX (Mutual Exclusion Object)
- Program object that is created so that multiple program thread can take turns sharing the same resource
- A mutex is created for a given resource when a program is started
	- System returns a unique name or ID for it
- Any thread needing the resource must use the mutex to lock the resource from other threads while it is using the resource
- if the mutex is already locked, a thread needing the resource is queued by the system and then given control when the mutex becomes unlocked

*REMEMBER TO LOCK OR ELSE A DATA RACE MAY OCCUR*

"Mutexes work like toilets. Once you go inside and lock the door, everyone else has to wait until you unlock the door and come out. If you never do that, everyone else (in theory) will have to wait infinitely."

DO NOT, USE LIBFT

memset 
void *memset(void *dest, int c, size_t count);

- sets first count bytes of dest to the value c
- int c is a unsigned character
- does NOT malloc

printf
ehe

ehe

malloc
allocates memory

free
frees memory

write
write stuff into fd

usleep
int usleep(useconds_t usec);

- suspend execution for microsecond intervals

gettimeofday

#include <sys/time.h>
int gettimeofday(struct timeval *restrict tv, struct timezone *restrict tz);

struct timeval {
	time_t      tv_sec;     /* seconds */
	suseconds_t tv_usec;    /* microseconds */
};

struct timezone {
	int tz_minuteswest;     /* minutes west of Greenwich */
	int tz_dsttime;         /* type of DST correction */
};
